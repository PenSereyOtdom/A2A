{"remainingRequest":"/Users/pensereyotdom/Documents/a2a-digital-site/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/pensereyotdom/Documents/a2a-digital-site/src/components/about-card/about-card.html?vue&type=template&id=99ad67e2&scoped=true&","dependencies":[{"path":"/Users/pensereyotdom/Documents/a2a-digital-site/src/components/about-card/about-card.html","mtime":1580263726836},{"path":"/Users/pensereyotdom/Documents/a2a-digital-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pensereyotdom/Documents/a2a-digital-site/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibF9zZWN0aW9uX19wcm9maWxlX19jYXJkIiB9LCBbCiAgICBfdm0uX20oMCksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfcHJvZmlsZV9fY2FyZF9fY29udGFpbmVyIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibF9wcm9maWxlX19jYXJkX19jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxfY2FyZF9fYWJvdXQiIH0sIFsKICAgICAgICAgIF92bS5fbSgxKSwKICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImNfYnRuX19tb3JlIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiUmVhZCBCaW8gIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJlbmFibGUtYmFja2dyb3VuZCI6ICJuZXcgMCAwIDUxMiA1MTIiIH0sCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgInhtbG5zOnhsaW5rIjogImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiLAogICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAiMS4xIiwKICAgICAgICAgICAgICAgICAgaWQ6ICJMYXllcl8xIiwKICAgICAgICAgICAgICAgICAgeDogIjBweCIsCiAgICAgICAgICAgICAgICAgIHk6ICIwcHgiLAogICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDUxMiA1MTIiLAogICAgICAgICAgICAgICAgICAieG1sOnNwYWNlIjogInByZXNlcnZlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJnIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJnIiwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWN0aXZlLXBhdGgiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTTUwOC44NzUsMjQ4LjQ1OGwtMTYwLTE2MGMtNC4xNjctNC4xNjctMTAuOTE3LTQuMTY3LTE1LjA4MywwYy00LjE2Nyw0LjE2Ny00LjE2NywxMC45MTcsMCwxNS4wODNsMTQxLjc5MiwxNDEuNzkyICAgIEgxMC42NjdDNC43NzEsMjQ1LjMzMywwLDI1MC4xMDQsMCwyNTZzNC43NzEsMTAuNjY3LDEwLjY2NywxMC42NjdoNDY0LjkxN0wzMzMuNzkyLDQwOC40NThjLTQuMTY3LDQuMTY3LTQuMTY3LDEwLjkxNywwLDE1LjA4MyAgICBjMi4wODMsMi4wODMsNC44MTMsMy4xMjUsNy41NDIsMy4xMjVjMi43MjksMCw1LjQ1OC0xLjA0Miw3LjU0Mi0zLjEyNWwxNjAtMTYwQzUxMy4wNDIsMjU5LjM3NSw1MTMuMDQyLDI1Mi42MjUsNTA4Ljg3NSwyNDguNDU4eiAgICAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLW9yaWdpbmFsIjogIiMwMDAwMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLW9sZF9jb2xvciI6ICIjMDAwMDAwIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxfY2FyZF9fYWJvdXQiIH0sIFsKICAgICAgICAgIF92bS5fbSgzKSwKICAgICAgICAgIF92bS5fbSg0KSwKICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImNfYnRuX19tb3JlIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiUmVhZCBCaW8gIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJlbmFibGUtYmFja2dyb3VuZCI6ICJuZXcgMCAwIDUxMiA1MTIiIH0sCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgInhtbG5zOnhsaW5rIjogImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiLAogICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAiMS4xIiwKICAgICAgICAgICAgICAgICAgaWQ6ICJMYXllcl8xIiwKICAgICAgICAgICAgICAgICAgeDogIjBweCIsCiAgICAgICAgICAgICAgICAgIHk6ICIwcHgiLAogICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDUxMiA1MTIiLAogICAgICAgICAgICAgICAgICAieG1sOnNwYWNlIjogInByZXNlcnZlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJnIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJnIiwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWN0aXZlLXBhdGgiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTTUwOC44NzUsMjQ4LjQ1OGwtMTYwLTE2MGMtNC4xNjctNC4xNjctMTAuOTE3LTQuMTY3LTE1LjA4MywwYy00LjE2Nyw0LjE2Ny00LjE2NywxMC45MTcsMCwxNS4wODNsMTQxLjc5MiwxNDEuNzkyICAgIEgxMC42NjdDNC43NzEsMjQ1LjMzMywwLDI1MC4xMDQsMCwyNTZzNC43NzEsMTAuNjY3LDEwLjY2NywxMC42NjdoNDY0LjkxN0wzMzMuNzkyLDQwOC40NThjLTQuMTY3LDQuMTY3LTQuMTY3LDEwLjkxNywwLDE1LjA4MyAgICBjMi4wODMsMi4wODMsNC44MTMsMy4xMjUsNy41NDIsMy4xMjVjMi43MjksMCw1LjQ1OC0xLjA0Miw3LjU0Mi0zLjEyNWwxNjAtMTYwQzUxMy4wNDIsMjU5LjM3NSw1MTMuMDQyLDI1Mi42MjUsNTA4Ljg3NSwyNDguNDU4eiAgICAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLW9yaWdpbmFsIjogIiMwMDAwMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLW9sZF9jb2xvciI6ICIjMDAwMDAwIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSksCiAgICBfdm0uX20oNSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfcHJvZmlsZV9fY2FyZF9fY29udGFpbmVyIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibF9wcm9maWxlX19jYXJkX19jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxfY2FyZF9fYWJvdXQiIH0sIFsKICAgICAgICAgIF92bS5fbSg2KSwKICAgICAgICAgIF92bS5fbSg3KSwKICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImNfYnRuX19tb3JlIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiUmVhZCBCaW8gIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJlbmFibGUtYmFja2dyb3VuZCI6ICJuZXcgMCAwIDUxMiA1MTIiIH0sCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgInhtbG5zOnhsaW5rIjogImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiLAogICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAiMS4xIiwKICAgICAgICAgICAgICAgICAgaWQ6ICJMYXllcl8xIiwKICAgICAgICAgICAgICAgICAgeDogIjBweCIsCiAgICAgICAgICAgICAgICAgIHk6ICIwcHgiLAogICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDUxMiA1MTIiLAogICAgICAgICAgICAgICAgICAieG1sOnNwYWNlIjogInByZXNlcnZlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJnIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJnIiwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWN0aXZlLXBhdGgiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTTUwOC44NzUsMjQ4LjQ1OGwtMTYwLTE2MGMtNC4xNjctNC4xNjctMTAuOTE3LTQuMTY3LTE1LjA4MywwYy00LjE2Nyw0LjE2Ny00LjE2NywxMC45MTcsMCwxNS4wODNsMTQxLjc5MiwxNDEuNzkyICAgIEgxMC42NjdDNC43NzEsMjQ1LjMzMywwLDI1MC4xMDQsMCwyNTZzNC43NzEsMTAuNjY3LDEwLjY2NywxMC42NjdoNDY0LjkxN0wzMzMuNzkyLDQwOC40NThjLTQuMTY3LDQuMTY3LTQuMTY3LDEwLjkxNywwLDE1LjA4MyAgICBjMi4wODMsMi4wODMsNC44MTMsMy4xMjUsNy41NDIsMy4xMjVjMi43MjksMCw1LjQ1OC0xLjA0Miw3LjU0Mi0zLjEyNWwxNjAtMTYwQzUxMy4wNDIsMjU5LjM3NSw1MTMuMDQyLDI1Mi42MjUsNTA4Ljg3NSwyNDguNDU4eiAgICAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLW9yaWdpbmFsIjogIiMwMDAwMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLW9sZF9jb2xvciI6ICIjMDAwMDAwIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxfY2FyZF9fYWJvdXQiIH0sIFsKICAgICAgICAgIF92bS5fbSg4KSwKICAgICAgICAgIF92bS5fbSg5KSwKICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImNfYnRuX19tb3JlIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiUmVhZCBCaW8gIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJlbmFibGUtYmFja2dyb3VuZCI6ICJuZXcgMCAwIDUxMiA1MTIiIH0sCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgInhtbG5zOnhsaW5rIjogImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiLAogICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAiMS4xIiwKICAgICAgICAgICAgICAgICAgaWQ6ICJMYXllcl8xIiwKICAgICAgICAgICAgICAgICAgeDogIjBweCIsCiAgICAgICAgICAgICAgICAgIHk6ICIwcHgiLAogICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDUxMiA1MTIiLAogICAgICAgICAgICAgICAgICAieG1sOnNwYWNlIjogInByZXNlcnZlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJnIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJnIiwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWN0aXZlLXBhdGgiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTTUwOC44NzUsMjQ4LjQ1OGwtMTYwLTE2MGMtNC4xNjctNC4xNjctMTAuOTE3LTQuMTY3LTE1LjA4MywwYy00LjE2Nyw0LjE2Ny00LjE2NywxMC45MTcsMCwxNS4wODNsMTQxLjc5MiwxNDEuNzkyICAgIEgxMC42NjdDNC43NzEsMjQ1LjMzMywwLDI1MC4xMDQsMCwyNTZzNC43NzEsMTAuNjY3LDEwLjY2NywxMC42NjdoNDY0LjkxN0wzMzMuNzkyLDQwOC40NThjLTQuMTY3LDQuMTY3LTQuMTY3LDEwLjkxNywwLDE1LjA4MyAgICBjMi4wODMsMi4wODMsNC44MTMsMy4xMjUsNy41NDIsMy4xMjVjMi43MjksMCw1LjQ1OC0xLjA0Miw3LjU0Mi0zLjEyNWwxNjAtMTYwQzUxMy4wNDIsMjU5LjM3NSw1MTMuMDQyLDI1Mi42MjUsNTA4Ljg3NSwyNDguNDU4eiAgICAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLW9yaWdpbmFsIjogIiMwMDAwMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLW9sZF9jb2xvciI6ICIjMDAwMDAwIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxfY2FyZF9fYWJvdXQiIH0sIFsKICAgICAgICAgIF92bS5fbSgxMCksCiAgICAgICAgICBfdm0uX20oMTEpLAogICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiY19idG5fX21vcmUiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJSZWFkIEJpbyAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImVuYWJsZS1iYWNrZ3JvdW5kIjogIm5ldyAwIDAgNTEyIDUxMiIgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgICAgICAgICAgICAgICAieG1sbnM6eGxpbmsiOiAiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsCiAgICAgICAgICAgICAgICAgIHZlcnNpb246ICIxLjEiLAogICAgICAgICAgICAgICAgICBpZDogIkxheWVyXzEiLAogICAgICAgICAgICAgICAgICB4OiAiMHB4IiwKICAgICAgICAgICAgICAgICAgeTogIjBweCIsCiAgICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgNTEyIDUxMiIsCiAgICAgICAgICAgICAgICAgICJ4bWw6c3BhY2UiOiAicHJlc2VydmUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiZyIsIFsKICAgICAgICAgICAgICAgICAgX2MoImciLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImciLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhY3RpdmUtcGF0aCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJNNTA4Ljg3NSwyNDguNDU4bC0xNjAtMTYwYy00LjE2Ny00LjE2Ny0xMC45MTctNC4xNjctMTUuMDgzLDBjLTQuMTY3LDQuMTY3LTQuMTY3LDEwLjkxNywwLDE1LjA4M2wxNDEuNzkyLDE0MS43OTIgICAgSDEwLjY2N0M0Ljc3MSwyNDUuMzMzLDAsMjUwLjEwNCwwLDI1NnM0Ljc3MSwxMC42NjcsMTAuNjY3LDEwLjY2N2g0NjQuOTE3TDMzMy43OTIsNDA4LjQ1OGMtNC4xNjcsNC4xNjctNC4xNjcsMTAuOTE3LDAsMTUuMDgzICAgIGMyLjA4MywyLjA4Myw0LjgxMywzLjEyNSw3LjU0MiwzLjEyNWMyLjcyOSwwLDUuNDU4LTEuMDQyLDcuNTQyLTMuMTI1bDE2MC0xNjBDNTEzLjA0MiwyNTkuMzc1LDUxMy4wNDIsMjUyLjYyNSw1MDguODc1LDI0OC40NTh6ICAgICIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtb3JpZ2luYWwiOiAiIzAwMDAwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtb2xkX2NvbG9yIjogIiMwMDAwMDAiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKSwKICAgIF92bS5fbSgxMiksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfcHJvZmlsZV9fY2FyZF9fY29udGFpbmVyIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibF9wcm9maWxlX19jYXJkX19jZW50ZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxfY2FyZF9fYWJvdXQiIH0sIFsKICAgICAgICAgIF92bS5fbSgxMyksCiAgICAgICAgICBfdm0uX20oMTQpLAogICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiY19idG5fX21vcmUiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJSZWFkIEJpbyAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImVuYWJsZS1iYWNrZ3JvdW5kIjogIm5ldyAwIDAgNTEyIDUxMiIgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgICAgICAgICAgICAgICAieG1sbnM6eGxpbmsiOiAiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsCiAgICAgICAgICAgICAgICAgIHZlcnNpb246ICIxLjEiLAogICAgICAgICAgICAgICAgICBpZDogIkxheWVyXzEiLAogICAgICAgICAgICAgICAgICB4OiAiMHB4IiwKICAgICAgICAgICAgICAgICAgeTogIjBweCIsCiAgICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgNTEyIDUxMiIsCiAgICAgICAgICAgICAgICAgICJ4bWw6c3BhY2UiOiAicHJlc2VydmUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiZyIsIFsKICAgICAgICAgICAgICAgICAgX2MoImciLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImciLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhY3RpdmUtcGF0aCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJNNTA4Ljg3NSwyNDguNDU4bC0xNjAtMTYwYy00LjE2Ny00LjE2Ny0xMC45MTctNC4xNjctMTUuMDgzLDBjLTQuMTY3LDQuMTY3LTQuMTY3LDEwLjkxNywwLDE1LjA4M2wxNDEuNzkyLDE0MS43OTIgICAgSDEwLjY2N0M0Ljc3MSwyNDUuMzMzLDAsMjUwLjEwNCwwLDI1NnM0Ljc3MSwxMC42NjcsMTAuNjY3LDEwLjY2N2g0NjQuOTE3TDMzMy43OTIsNDA4LjQ1OGMtNC4xNjcsNC4xNjctNC4xNjcsMTAuOTE3LDAsMTUuMDgzICAgIGMyLjA4MywyLjA4Myw0LjgxMywzLjEyNSw3LjU0MiwzLjEyNWMyLjcyOSwwLDUuNDU4LTEuMDQyLDcuNTQyLTMuMTI1bDE2MC0xNjBDNTEzLjA0MiwyNTkuMzc1LDUxMy4wNDIsMjUyLjYyNSw1MDguODc1LDI0OC40NTh6ICAgICIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtb3JpZ2luYWwiOiAiIzAwMDAwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtb2xkX2NvbG9yIjogIiMwMDAwMDAiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibF9jYXJkX19hYm91dCIgfSwgWwogICAgICAgICAgX3ZtLl9tKDE1KSwKICAgICAgICAgIF92bS5fbSgxNiksCiAgICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJjX2J0bl9fbW9yZSIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIlJlYWQgQmlvICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiZW5hYmxlLWJhY2tncm91bmQiOiAibmV3IDAgMCA1MTIgNTEyIiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICAgICAgICAgICAgICAgICJ4bWxuczp4bGluayI6ICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiwKICAgICAgICAgICAgICAgICAgdmVyc2lvbjogIjEuMSIsCiAgICAgICAgICAgICAgICAgIGlkOiAiTGF5ZXJfMSIsCiAgICAgICAgICAgICAgICAgIHg6ICIwcHgiLAogICAgICAgICAgICAgICAgICB5OiAiMHB4IiwKICAgICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCA1MTIgNTEyIiwKICAgICAgICAgICAgICAgICAgInhtbDpzcGFjZSI6ICJwcmVzZXJ2ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJnIiwgWwogICAgICAgICAgICAgICAgICBfYygiZyIsIFsKICAgICAgICAgICAgICAgICAgICBfYygiZyIsIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFjdGl2ZS1wYXRoIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIk01MDguODc1LDI0OC40NThsLTE2MC0xNjBjLTQuMTY3LTQuMTY3LTEwLjkxNy00LjE2Ny0xNS4wODMsMGMtNC4xNjcsNC4xNjctNC4xNjcsMTAuOTE3LDAsMTUuMDgzbDE0MS43OTIsMTQxLjc5MiAgICBIMTAuNjY3QzQuNzcxLDI0NS4zMzMsMCwyNTAuMTA0LDAsMjU2czQuNzcxLDEwLjY2NywxMC42NjcsMTAuNjY3aDQ2NC45MTdMMzMzLjc5Miw0MDguNDU4Yy00LjE2Nyw0LjE2Ny00LjE2NywxMC45MTcsMCwxNS4wODMgICAgYzIuMDgzLDIuMDgzLDQuODEzLDMuMTI1LDcuNTQyLDMuMTI1YzIuNzI5LDAsNS40NTgtMS4wNDIsNy41NDItMy4xMjVsMTYwLTE2MEM1MTMuMDQyLDI1OS4zNzUsNTEzLjA0MiwyNTIuNjI1LDUwOC44NzUsMjQ4LjQ1OHogICAgIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS1vcmlnaW5hbCI6ICIjMDAwMDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS1vbGRfY29sb3IiOiAiIzAwMDAwMCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsX2NhcmRfX2Fib3V0IiB9LCBbCiAgICAgICAgICBfdm0uX20oMTcpLAogICAgICAgICAgX3ZtLl9tKDE4KSwKICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImNfYnRuX19tb3JlIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiUmVhZCBCaW8gIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJlbmFibGUtYmFja2dyb3VuZCI6ICJuZXcgMCAwIDUxMiA1MTIiIH0sCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgInhtbG5zOnhsaW5rIjogImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiLAogICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAiMS4xIiwKICAgICAgICAgICAgICAgICAgaWQ6ICJMYXllcl8xIiwKICAgICAgICAgICAgICAgICAgeDogIjBweCIsCiAgICAgICAgICAgICAgICAgIHk6ICIwcHgiLAogICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDUxMiA1MTIiLAogICAgICAgICAgICAgICAgICAieG1sOnNwYWNlIjogInByZXNlcnZlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImciLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJnIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJnIiwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWN0aXZlLXBhdGgiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTTUwOC44NzUsMjQ4LjQ1OGwtMTYwLTE2MGMtNC4xNjctNC4xNjctMTAuOTE3LTQuMTY3LTE1LjA4MywwYy00LjE2Nyw0LjE2Ny00LjE2NywxMC45MTcsMCwxNS4wODNsMTQxLjc5MiwxNDEuNzkyICAgIEgxMC42NjdDNC43NzEsMjQ1LjMzMywwLDI1MC4xMDQsMCwyNTZzNC43NzEsMTAuNjY3LDEwLjY2NywxMC42NjdoNDY0LjkxN0wzMzMuNzkyLDQwOC40NThjLTQuMTY3LDQuMTY3LTQuMTY3LDEwLjkxNywwLDE1LjA4MyAgICBjMi4wODMsMi4wODMsNC44MTMsMy4xMjUsNy41NDIsMy4xMjVjMi43MjksMCw1LjQ1OC0xLjA0Miw3LjU0Mi0zLjEyNWwxNjAtMTYwQzUxMy4wNDIsMjU5LjM3NSw1MTMuMDQyLDI1Mi42MjUsNTA4Ljg3NSwyNDguNDU4eiAgICAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLW9yaWdpbmFsIjogIiMwMDAwMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLW9sZF9jb2xvciI6ICIjMDAwMDAwIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxfY2FyZF9fYWJvdXQiIH0sIFsKICAgICAgICAgIF92bS5fbSgxOSksCiAgICAgICAgICBfdm0uX20oMjApLAogICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiY19idG5fX21vcmUiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJSZWFkIEJpbyAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImVuYWJsZS1iYWNrZ3JvdW5kIjogIm5ldyAwIDAgNTEyIDUxMiIgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgICAgICAgICAgICAgICAieG1sbnM6eGxpbmsiOiAiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsCiAgICAgICAgICAgICAgICAgIHZlcnNpb246ICIxLjEiLAogICAgICAgICAgICAgICAgICBpZDogIkxheWVyXzEiLAogICAgICAgICAgICAgICAgICB4OiAiMHB4IiwKICAgICAgICAgICAgICAgICAgeTogIjBweCIsCiAgICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgNTEyIDUxMiIsCiAgICAgICAgICAgICAgICAgICJ4bWw6c3BhY2UiOiAicHJlc2VydmUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiZyIsIFsKICAgICAgICAgICAgICAgICAgX2MoImciLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImciLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhY3RpdmUtcGF0aCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJNNTA4Ljg3NSwyNDguNDU4bC0xNjAtMTYwYy00LjE2Ny00LjE2Ny0xMC45MTctNC4xNjctMTUuMDgzLDBjLTQuMTY3LDQuMTY3LTQuMTY3LDEwLjkxNywwLDE1LjA4M2wxNDEuNzkyLDE0MS43OTIgICAgSDEwLjY2N0M0Ljc3MSwyNDUuMzMzLDAsMjUwLjEwNCwwLDI1NnM0Ljc3MSwxMC42NjcsMTAuNjY3LDEwLjY2N2g0NjQuOTE3TDMzMy43OTIsNDA4LjQ1OGMtNC4xNjcsNC4xNjctNC4xNjcsMTAuOTE3LDAsMTUuMDgzICAgIGMyLjA4MywyLjA4Myw0LjgxMywzLjEyNSw3LjU0MiwzLjEyNWMyLjcyOSwwLDUuNDU4LTEuMDQyLDcuNTQyLTMuMTI1bDE2MC0xNjBDNTEzLjA0MiwyNTkuMzc1LDUxMy4wNDIsMjUyLjYyNSw1MDguODc1LDI0OC40NTh6ICAgICIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtb3JpZ2luYWwiOiAiIzAwMDAwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtb2xkX2NvbG9yIjogIiMwMDAwMDAiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJoZWFkZXIiLCB7IHN0YXRpY0NsYXNzOiAiY19hYm91dF90aXRsZSIgfSwgWwogICAgICBfYygiaDEiLCBbX3ZtLl92KCJPdXIgUHJvamVjdCBNYW5hZ2VyIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImhlYWRlciIsIHsgc3RhdGljQ2xhc3M6ICJjX3Byb2ZpbGVfX2NhcmRfX2NhcHRpb24iIH0sIFsKICAgICAgX2MoImgxIiwgW192bS5fdigiTG9lbSBEYXJhIildKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJQcm9qZWN0IE1hbmdlciIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19wcm9maWxlX19jYXJkX19pbWciIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaW1nMS5qcGciKSwgYWx0OiAidGVzdCBpbWcgIiB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiaGVhZGVyIiwgeyBzdGF0aWNDbGFzczogImNfcHJvZmlsZV9fY2FyZF9fY2FwdGlvbiIgfSwgWwogICAgICBfYygiaDEiLCBbX3ZtLl92KCJMb2VtIERhcmEiKV0pLAogICAgICBfYygicCIsIFtfdm0uX3YoIlByb2plY3QgTWFuZ2VyIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX3Byb2ZpbGVfX2NhcmRfX2ltZyIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9pbWcxLmpwZyIpLCBhbHQ6ICJ0ZXN0IGltZyAiIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJoZWFkZXIiLCB7IHN0YXRpY0NsYXNzOiAiY19hYm91dF90aXRsZSIgfSwgWwogICAgICBfYygiaDEiLCBbX3ZtLl92KCJPdXIgUHJvamVjdCBBZHZpc2VyIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImhlYWRlciIsIHsgc3RhdGljQ2xhc3M6ICJjX3Byb2ZpbGVfX2NhcmRfX2NhcHRpb24iIH0sIFsKICAgICAgX2MoImgxIiwgW192bS5fdigiTG9lbSBEYXJhIildKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJQcm9qZWN0IE1hbmdlciIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19wcm9maWxlX19jYXJkX19pbWciIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaW1nMS5qcGciKSwgYWx0OiAidGVzdCBpbWcgIiB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiaGVhZGVyIiwgeyBzdGF0aWNDbGFzczogImNfcHJvZmlsZV9fY2FyZF9fY2FwdGlvbiIgfSwgWwogICAgICBfYygiaDEiLCBbX3ZtLl92KCJMb2VtIERhcmEiKV0pLAogICAgICBfYygicCIsIFtfdm0uX3YoIlByb2plY3QgTWFuZ2VyIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX3Byb2ZpbGVfX2NhcmRfX2ltZyIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9pbWcxLmpwZyIpLCBhbHQ6ICJ0ZXN0IGltZyAiIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJoZWFkZXIiLCB7IHN0YXRpY0NsYXNzOiAiY19wcm9maWxlX19jYXJkX19jYXB0aW9uIiB9LCBbCiAgICAgIF9jKCJoMSIsIFtfdm0uX3YoIkxvZW0gRGFyYSIpXSksCiAgICAgIF9jKCJwIiwgW192bS5fdigiUHJvamVjdCBNYW5nZXIiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfcHJvZmlsZV9fY2FyZF9faW1nIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2ltZzEuanBnIiksIGFsdDogInRlc3QgaW1nICIgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImhlYWRlciIsIHsgc3RhdGljQ2xhc3M6ICJjX2Fib3V0X3RpdGxlIiB9LCBbCiAgICAgIF9jKCJoMSIsIFtfdm0uX3YoIlRlc3QgRm91ciIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJoZWFkZXIiLCB7IHN0YXRpY0NsYXNzOiAiY19wcm9maWxlX19jYXJkX19jYXB0aW9uIiB9LCBbCiAgICAgIF9jKCJoMSIsIFtfdm0uX3YoIkxvZW0gRGFyYSIpXSksCiAgICAgIF9jKCJwIiwgW192bS5fdigiUHJvamVjdCBNYW5nZXIiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfcHJvZmlsZV9fY2FyZF9faW1nIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2ltZzEuanBnIiksIGFsdDogInRlc3QgaW1nICIgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImhlYWRlciIsIHsgc3RhdGljQ2xhc3M6ICJjX3Byb2ZpbGVfX2NhcmRfX2NhcHRpb24iIH0sIFsKICAgICAgX2MoImgxIiwgW192bS5fdigiTG9lbSBEYXJhIildKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJQcm9qZWN0IE1hbmdlciIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19wcm9maWxlX19jYXJkX19pbWciIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaW1nMS5qcGciKSwgYWx0OiAidGVzdCBpbWcgIiB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiaGVhZGVyIiwgeyBzdGF0aWNDbGFzczogImNfcHJvZmlsZV9fY2FyZF9fY2FwdGlvbiIgfSwgWwogICAgICBfYygiaDEiLCBbX3ZtLl92KCJMb2VtIERhcmEiKV0pLAogICAgICBfYygicCIsIFtfdm0uX3YoIlByb2plY3QgTWFuZ2VyIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX3Byb2ZpbGVfX2NhcmRfX2ltZyIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9pbWcxLmpwZyIpLCBhbHQ6ICJ0ZXN0IGltZyAiIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJoZWFkZXIiLCB7IHN0YXRpY0NsYXNzOiAiY19wcm9maWxlX19jYXJkX19jYXB0aW9uIiB9LCBbCiAgICAgIF9jKCJoMSIsIFtfdm0uX3YoIkxvZW0gRGFyYSIpXSksCiAgICAgIF9jKCJwIiwgW192bS5fdigiUHJvamVjdCBNYW5nZXIiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfcHJvZmlsZV9fY2FyZF9faW1nIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2ltZzEuanBnIiksIGFsdDogInRlc3QgaW1nICIgfQogICAgICB9KQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}